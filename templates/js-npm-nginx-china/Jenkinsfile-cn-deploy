def SERVICE_GROUP = "sample"
def SERVICE_NAME = "devops"
def IMAGE_NAME = "${SERVICE_GROUP}-${SERVICE_NAME}"
def SLACK_TOKEN_DEV = ""
def SLACK_TOKEN_DQA = ""


//@Library("github.com/opsnow-tools/valve-butler")
@Library("github.com/gelius7/valve-butler")
def butler = new com.opsnow.valve.v7.ButlerChina()
def label = "worker-${UUID.randomUUID().toString()}"

properties([
  buildDiscarder(logRotator(daysToKeepStr: "60", numToKeepStr: "30"))
])
podTemplate(label: label, containers: [
//  containerTemplate(name: "builder", image: "quay.io/opsnow-tools/valve-builder", command: "cat", ttyEnabled: true, alwaysPullImage: true),
  containerTemplate(name: "builder", image: "opsnowtools/valve-builder:v0.2.18", command: "cat", ttyEnabled: true, alwaysPullImage: true),
], volumes: [
]) {
  node(label) {
    stage("Request Stage") {
      container("builder") {

        butler.prepare(IMAGE_NAME)
//        //def url = "chartmuseum-devops.coruscant.opsnow.com"
//        def list = butler.scan_charts()
//
//        echo "Select your Image"
//        timeout(time: 5, unit: "MINUTES") {
//          param = input(message:'Select Image ', parameters: [
//              [$class: 'ChoiceParameterDefinition', choices: list, description: 'Select image for DEPLOY', name: 'sel_image']
//          ])
//        }
//        image = param

        def version_list = butler.scan_charts_version(IMAGE_NAME)
        echo "Select your Image Version"
        timeout(time: 5, unit: "MINUTES") {
          param_ver = input(message:'Select Image Version', parameters: [
              [$class: 'ChoiceParameterDefinition', choices: version_list, description: 'Select image version for DEPLOY', name: 'sel_image_ver']
          ])
        }
        image_version = param_ver

        butler.prepare(IMAGE_NAME, image_version)
      }
    }
//    stage("Proceed China PROD") {
//      container("builder") {
//        butler.proceed(SLACK_TOKEN_DQA, "Deploy PROD", "prod")
//        timeout(time: 60, unit: "MINUTES") {
//          input(message: "${butler.name} ${butler.version} to prod")
//        }
//      }
//    }
    stage("Deploy China PROD") {
      container("builder") {
        try {
          // deploy(cluster, namespace, sub_domain, profile)
          butler.deploy("skc2", "${SERVICE_GROUP}-prod", "${IMAGE_NAME}", "prod")
          butler.success([SLACK_TOKEN_DEV,SLACK_TOKEN_DQA], "Deploy PROD")
        } catch (e) {
          butler.failure([SLACK_TOKEN_DEV,SLACK_TOKEN_DQA], "Deploy PROD")
          throw e
        }
      }
    }
  }
}
